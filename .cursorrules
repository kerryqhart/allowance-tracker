# Allowance Tracker - Cursor AI Rules

## Project Overview
This is a desktop allowance tracking application built with egui (Rust native GUI framework). The app helps parents and children track allowance transactions with a visual calendar interface, transaction tables, and balance charts.

## Architecture
- **Frontend**: egui (Rust native GUI) - immediate mode GUI framework
- **Backend**: Domain services with CSV-based storage layer
- **Desktop**: Native Rust application (no web components)
- **Database**: CSV files with optional SQLite future migration
- **Development**: `cargo run --bin allowance-tracker-egui` for development

## Project Structure
```
allowance-tracker/
├── egui-frontend/      # egui native GUI frontend
├── shared/            # Shared types and utilities  
├── backend/           # Domain services and storage
│   ├── domain/        # Business logic services
│   └── storage/       # CSV and future SQLite repositories
└── Cargo.toml         # Workspace configuration
```

## Key Technologies
- **egui**: Immediate mode GUI framework for Rust
- **eframe**: Application framework for egui
- **CSV Storage**: File-based data persistence
- **Chrono**: Date/time handling
- **Serde**: Serialization/deserialization
- **Anyhow**: Error handling

## Development Guidelines

### Code Style
- Use Rust idioms and best practices
- Prefer `Result<T, E>` for error handling
- Follow standard Rust naming conventions (snake_case, PascalCase)
- Add comprehensive error handling and logging
- Use immediate mode GUI patterns for egui

### Frontend (egui)
- Use immediate mode GUI patterns - UI state in functions, not stored
- Leverage egui's built-in widgets and layouts
- Handle loading states and errors gracefully
- Maintain responsive design for different window sizes
- Use egui's styling system for consistent appearance
- Prefer egui's native components over custom implementations

### Backend (Domain Services)
- Clean separation between UI and business logic
- Domain services should be UI-agnostic
- Use CSV repositories for data persistence
- Implement proper error handling with custom error types
- Follow functional programming patterns where appropriate

### Storage Layer
- CSV-based persistence for human-readable data files
- Use transactions for data consistency when possible
- Implement proper file locking for concurrent access
- Plan for future SQLite migration path

### UI/UX Guidelines  
- Native desktop feel with egui's immediate mode approach
- Responsive layout that adapts to window resizing
- Visual calendar with transaction indicators
- Color coding: green for positive amounts, red/orange for negative
- Use egui's built-in tooltips and hover states
- Maintain consistent spacing and typography

### Testing
- Unit tests for business logic in domain services
- Integration tests for storage layer
- UI logic testing where applicable
- Mock external dependencies in tests

### Performance
- Leverage egui's efficient immediate mode rendering
- Use efficient data structures for large transaction sets
- Implement proper data pagination for large datasets
- Optimize file I/O operations

## Current Features
- Transaction listing with calendar and table views
- Visual calendar view with transaction indicators
- Balance tracking and visualization
- Add/spend money forms
- Child profile management
- CSV-based data persistence
- Native desktop UI with window management

## Development Commands
- `cargo run --bin allowance-tracker-egui` - Start development with hot reload
- `cargo check --workspace` - Check all workspace members
- `cargo test --workspace` - Run all tests
- `cargo build --release` - Build optimized production binary

## Known Issues & TODOs
- Enhanced calendar interactions
- Transaction editing and deletion
- Data export/import functionality
- Advanced filtering and search
- Multiple child support
- Backup and restore features

## File Naming & Organization
- Use kebab-case for file names
- Group related functionality in modules
- Keep UI components focused and single-purpose
- Separate business logic from UI rendering code

## Error Handling Patterns
- Use `anyhow` for application errors
- Implement custom error types for domain-specific errors
- Log errors appropriately (info, warn, error levels)
- Provide user-friendly error messages in the UI
- Use egui's error display patterns

## When Making Changes
- Test changes with `cargo run --bin allowance-tracker-egui`
- Ensure responsive design works with different window sizes
- Verify data persistence works correctly
- Update documentation if adding new features
- Follow existing code patterns and conventions
- Use `is_background=true` for cargo run commands in development

## Dependencies Management
- Keep dependencies up to date but stable
- Prefer well-maintained crates with good documentation
- Minimize dependency tree size for faster builds
- Use workspace dependencies for shared crates
- Prioritize egui ecosystem crates when possible

## egui-Specific Guidelines
- Use immediate mode patterns - compute UI state in render functions
- Leverage egui's built-in widgets (buttons, text inputs, layouts)
- Use `egui::Context` appropriately for frame-based operations
- Handle window events and resizing gracefully
- Use egui's color themes and styling systems
- Implement proper keyboard and mouse interaction patterns

## Git - REQUIRES USER APPROVAL
- **CRITICAL**: NEVER run git commands without explicit user approval first
- **ALWAYS ASK**: "Would you like me to commit these changes?" before any git operations
- Only after user explicitly approves should you proceed with git commands
- When user approves a commit: write the commit message to a temporary file using edit_file, then run `git commit --file=<temp-file>`, then delete the temp file
- This applies to ALL git operations: commit, push, merge, rebase, etc.
- If unsure whether user wants changes committed, ASK FIRST