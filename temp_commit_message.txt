feat: Add comprehensive backdated transaction support

Implements Phase 1 of backdated transaction functionality with complete
backend infrastructure for adding transactions with custom dates.

## New Features

### Enhanced REST APIs
- Updated `add_money` and `spend_money` endpoints to accept optional `date` parameter
- Automatic validation and balance recalculation for backdated entries
- Enhanced success messages indicating when transactions are backdated

### Date Validation System
- RFC 3339 format validation with timezone support
- 45-day maximum backdate limit enforcement
- Future date prevention
- Child creation date boundary validation
- Comprehensive error messages for all validation failures

### Balance Management Engine
- New `BalanceService` for sophisticated balance calculations
- Automatic detection when balance recalculation is required
- Efficient chronological transaction reprocessing
- Complete balance validation and correction capabilities

### Database Enhancements
- New date-based query methods in `TransactionRepository`
- Proper chronological ordering (date ASC/DESC + ROWID)
- Support for retrieving transactions before/after specific dates
- Batch balance update operations

## Technical Implementation

### Core Services
- `BalanceService`: Handles all balance recalculation logic
- Enhanced `TransactionService`: Integrates balance recalculation for backdated transactions
- `MoneyManagementService`: Extended with date validation methods

### Validation Rules
- Transactions cannot be more than 45 days in the past
- Transactions cannot be in the future
- Transactions cannot predate child creation
- All dates must be in valid RFC 3339 format

### Performance Considerations
- Optimized for 100-200 transactions per year load
- Efficient balance recalculation using chronological ordering
- Minimal database queries for validation and updates

## Testing
- 43 comprehensive unit tests covering all functionality
- 100% test coverage for new balance recalculation logic
- Edge case testing for timezone handling and validation boundaries
- Integration tests for API endpoints with date validation

## Breaking Changes
None - all changes are backward compatible. Existing API calls without
date parameters continue to work exactly as before.

## Usage Example
```bash
POST /api/money/add
{
  "description": "Birthday money from grandma", 
  "amount": 25.0,
  "date": "2024-12-20T14:30:00-05:00"  // Optional
}
```

Ready for production use with robust error handling and comprehensive
validation to maintain data integrity. 