Fix NaN balance display for future allowances and clean up obsolete code

- **FIXED**: NaN balance issue in calendar display for future allowances
  - Changed calendar service to use `generate_calendar_month_with_projected_balances()` 
  - This method properly handles NaN balances from future allowances by calculating projected balances
  - Future allowances now show correct projected balance instead of "NaN"

- **CLEANED UP**: Removed obsolete calendar methods that didn't handle NaN balances
  - Removed `generate_calendar_month()` - old method without NaN handling
  - Removed `calculate_daily_balances()` - problematic method that couldn't handle NaN
  - Updated all tests to use the enhanced method with proper test infrastructure
  - Fixed minor warning about unnecessary `mut` keyword

- **ENHANCED**: Transaction service API
  - Made `get_active_child()` public for calendar service access
  - Added `create_balance_service()` method for projected balance calculations

Root cause: Future allowances were correctly created with NaN balance (delegating to BalanceService), 
but the calendar service was using a basic method that passed NaN values directly to the frontend.

All 19 calendar tests pass. The enhanced method handles both scenarios:
- Normal transactions with pre-calculated balances (unchanged)
- Future allowances with NaN balances (now calculates projected balances)

Benefits: Single robust method, no duplicate code, future-proof NaN handling 