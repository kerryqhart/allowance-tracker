feat(architecture): Complete Storage Layer Migration to Domain Models

**ðŸŽ¯ MAJOR MILESTONE: Clean Architecture Achieved**

**Storage Layer Migration Complete:**
- All storage traits now use domain models exclusively
- AllowanceStorage â†’ DomainAllowanceConfig
- ParentalControlStorage â†’ DomainParentalControlAttempt  
- GoalStorage â†’ DomainGoal & DomainGoalState
- Zero shared imports in storage layer

**Repository Implementations Updated:**
- ParentalControlRepository: Migrated to domain models for all CRUD operations
- GoalRepository: Complete migration from shared::Goal to DomainGoal
- AllowanceRepository: Already using domain models
- Type conversion chains properly implemented

**Service Layer Architecture:**
- Domain services use pure domain models
- Storage repositories return domain models
- API mappers handle shared â†” domain conversion
- Clean separation of concerns achieved

**Domain Model Ecosystem:**
- Added ParentalControlAttempt domain model
- Enhanced goal models with proper domain logic
- All business rules encapsulated in domain layer

**Build Status:** âœ… Main codebase compiles successfully
**Architecture:** âœ… Clean Architecture principles enforced
**Type Safety:** âœ… Compile-time domain model guarantees

**Next Phase:** Test suite updates (tests still use old API patterns)

Files changed: 15+ files across storage, domain, and service layers
- Storage layer: 0 shared imports (pure domain models)
- Domain layer: Business logic isolated
- API layer: Proper mapping boundaries 