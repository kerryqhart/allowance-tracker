refactor: Break calendar_renderer.rs into organized submodules

Split monolithic 1565-line calendar_renderer.rs into clean, focused modules:

• types.rs - Core data structures and enums (CalendarDay, RenderConfig, etc.)
• styling.rs - Visual constants, colors, fonts, and styling functions  
• layout.rs - Calculation methods for sizing and positioning
• rendering.rs - Core drawing and painting logic (970+ lines)
• interactions.rs - Event handling and user interaction methods
• navigation.rs - Month navigation and date calculation utilities
• mod.rs - Public API with clean re-exports

Benefits:
- Single responsibility principle - each module has one clear purpose
- Improved maintainability - easier to find and modify specific functionality
- Better testability - individual concerns can be unit tested in isolation
- Enhanced readability - developers can focus on specific aspects
- Parallel development - multiple developers can work on different modules

Technical:
- Zero breaking changes - all existing functionality preserved
- Clean builds with no compilation errors
- Consistent public API maintained via re-exports
- Follows Rust module organization best practices

Total lines: ~1850 (increase due to added documentation and cleaner separation) 