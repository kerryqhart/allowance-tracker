feat: Complete Allowance Bounded Context migration from shared to domain models

MAJOR MILESTONE: Successfully migrated allowance functionality to use domain models exclusively

Domain Architecture:
- Added allowance module to commands.rs with GetAllowanceConfigCommand/UpdateAllowanceConfigCommand
- Enhanced domain AllowanceConfig with generate_id() and is_valid_day_of_week() methods  
- Created comprehensive command/result types for clean service interfaces

Service Layer Refactoring:
- Refactored allowance_service.rs to use domain models only
- Implemented bidirectional mapping: Storage (shared) ↔ Domain ↔ API (shared DTOs)
- All method signatures now use domain commands instead of shared DTOs
- Added proper error handling and validation at domain level

API Integration:
- Updated Tauri commands in lib.rs to use domain commands and mappers
- Fixed REST endpoints in allowance_apis.rs with proper DTO conversion
- Updated goal_service.rs to use domain allowance commands
- Maintained backward compatibility with existing API contracts

Benefits Achieved:
- Clean separation of concerns between layers
- Domain logic is now independent of external contracts  
- Type safety prevents shared types from leaking into domain
- Easier testing and maintenance with focused domain models
- Foundation ready for remaining bounded context migrations

Migration Progress:
✅ Domain Models Foundation
✅ Goal Mapper Creation  
✅ Goal Domain Model Fix
✅ Transaction Bounded Context Migration
✅ Allowance Bounded Context Migration ← COMPLETED
⏳ Next: Goal Bounded Context Migration

All tests pass, app builds and runs successfully with enhanced architecture. 