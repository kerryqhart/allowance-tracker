Centralize calendar day color schemes in CalendarDayType enum

- Add color methods to CalendarDayType enum for type-safe color management
- Implement background_color(), border_color(), day_text_color(), balance_text_color()
- Each method returns appropriate colors based on day type (CurrentMonth vs FillerDay)
- Handle today highlighting logic within the color methods
- Refactor render_with_config() to use centralized color methods
- Replace scattered color conditionals with clean method calls
- Maintain existing visual appearance while improving code architecture

Before:
```rust
let bg_color = if self.is_today {
    egui::Color32::from_rgba_unmultiplied(255, 248, 220, 110)
} else if self.day_type == CalendarDayType::FillerDay {
    egui::Color32::from_rgba_unmultiplied(120, 120, 120, 55)
} else {
    egui::Color32::from_rgba_unmultiplied(255, 255, 255, 55)
};
```

After:
```rust
let bg_color = self.day_type.background_color(self.is_today);
```

Benefits:
- Single source of truth for all calendar day color schemes
- Type-safe color management tied to day types
- Cleaner, more maintainable rendering code
- Easy to modify colors in future (one place to change)
- Self-documenting color methods with clear intent
- Improved architectural separation of concerns 