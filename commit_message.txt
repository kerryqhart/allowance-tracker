feat: Implement complete settings system with create child flow

## Major Features Added:
- **Settings submodule**: Created organized ui/components/settings/ structure
- **Create child modal**: Full implementation with form validation and backend integration
- **Settings state management**: Centralized SettingsState for all settings forms
- **Common data refresh**: Single method for refreshing all views when switching children

## Settings System Structure:
- `settings/mod.rs` - Module organization and documentation
- `settings/state.rs` - Centralized state (CreateChildFormState, ProfileFormState)
- `settings/shared.rs` - Common utilities and consistent modal styling
- `settings/create_child_modal.rs` - Complete create child implementation
- `settings/profile_modal.rs` - Moved from modals/ for better organization

## Create Child Flow:
- Real-time form validation for name and birthdate fields
- Backend integration using CreateChildCommand API
- Automatically sets new child as active and refreshes all data
- Consistent styling using shared settings utilities
- Protected by parental control system

## Code Organization Improvements:
- Moved ProfileFormState from ModalState to SettingsState
- Updated all references to use settings.profile_form instead of modal.profile_form
- Created refresh_all_data_for_current_child() method in data_loading.rs
- Refactored child selector, header dropdown, and create child to use common refresh method

## Bug Fixes:
- Fixed create child modal backdrop click handling (was closing on any click)
- Removed unwanted success message that appeared as red error text
- Ensured all views (calendar, table, chart, goals) refresh when creating/switching children

## Technical Details:
- All settings modals now use consistent SettingsModalStyle
- Form validation with real-time error display
- Proper error handling and loading states
- Clean separation between UI and business logic
- Maintained backward compatibility for existing functionality 