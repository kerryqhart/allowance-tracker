Fix architectural violation: Convert string dates to DateTime objects

CRITICAL ARCHITECTURAL FIX: Enforced architectural invariant that "String dates should never leave the CSV layer; only DTOs should exit the CSV layer, and all datetime parsing is handled within the CSV layer."

This was the root cause of the June calendar chip display issue - timezone parsing errors occurred when frontend tried to parse already-parsed DateTime objects as strings.

## Changes Made:

**Backend Domain Services:**
- allowance_service.rs: Fixed DateTime creation, date string comparisons, added FixedOffset import
- balance_service.rs: Updated string comparison logic to format DateTime objects
- export_service.rs: Simplified date formatting using DateTime objects directly
- transaction_table.rs: Updated to format DateTime objects for display
- calendar.rs: Fixed date parsing throughout transaction processing

**Backend Domain Models:**
- transaction.rs: Changed date field from String to DateTime<FixedOffset>

**Backend CSV Repositories:**
- transaction_repository.rs: Fixed from_local_datetime usage, updated date comparison logic
- child_repository.rs: Created intermediate YamlChild struct for YAML serialization

**Frontend Components:**
- mappers.rs: Changed from string conversion to direct DateTime assignment
- data_loading.rs: Removed unnecessary date parsing, used DateTime objects directly
- transaction_table.rs: Simplified date formatting using DateTime objects
- calendar_renderer.rs: Removed complex date parsing, simplified to use DateTime objects
- table_renderer.rs: Updated date display logic

**Shared Models:**
- lib.rs: Updated Transaction, Child, AllowanceConfig, Goal to use proper DateTime types

**Test Dependencies:**
- egui-frontend/Cargo.toml: Added tempfile and tokio dev-dependencies for tests

## Technical Details:
- All date fields now use DateTime<FixedOffset> or DateTime<Utc> instead of String
- CSV layer properly parses date strings internally before passing to domain layer
- Frontend components work with DateTime objects directly
- Comprehensive timezone support with proper parsing from CSV date strings
- Fixed date comparison logic throughout the system

## Result:
- Compilation errors reduced from 281 to 0 (tests still need fixing)
- June calendar chips should now display correctly
- Proper separation of concerns between CSV parsing and domain logic
- Foundation for robust date handling throughout the application

Progress: Architectural invariant successfully enforced across all layers. 