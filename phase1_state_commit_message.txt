✅ Phase 1: State Management Cleanup - Create organized state modules

## What was accomplished:
- **Created new state module structure** under `ui/state/` with 6 focused modules:
  - `app_state.rs` - Core application state (backend, child, balance, tab)
  - `ui_state.rs` - General UI state (loading, messages)
  - `calendar_state.rs` - Calendar-specific state and navigation
  - `modal_state.rs` - Modal visibility and modal-specific state  
  - `form_state.rs` - Form inputs and validation states
  - `interaction_state.rs` - User interaction state (selection, dropdowns)

## Organizational improvements:
- **Separated concerns** into logical, maintainable modules
- **Added clear documentation** for each state module's responsibilities
- **Maintained API compatibility** through careful re-exports
- **Applied calendar_renderer pattern** to state management

## Technical details:
- Created organized state structure without breaking existing functionality
- Used re-exports to maintain import compatibility
- Extracted state categories from monolithic AllowanceTrackerApp
- Added utility methods for state management

## Validation:
- ✅ Compilation successful with new state modules
- ✅ App runs correctly with organized state
- ✅ All imports remain functional
- ✅ No implementation logic changes (organization only)

This establishes the foundation for better state management and prepares
for Phase 2 (Modal Modularization). The original 29KB monolithic app_state.rs
can now be gradually migrated to use these focused state modules. 