refactor: migrate from monolithic db.rs to repository pattern

BREAKING CHANGE: Complete database layer refactoring

## What Changed
- **Deleted** monolithic `db.rs` (1,181 lines) 
- **Created** clean repository pattern with focused responsibilities:
  - `connection.rs` (159 lines) - DB connection & schema setup only
  - `repositories/transaction_repository.rs` (176 lines) - Transaction operations
  - `repositories/child_repository.rs` (165 lines) - Child operations  
  - `repositories/parental_control_repository.rs` (69 lines) - Parental control operations

## Architecture Improvements
- ✅ **Single Responsibility Principle**: Each repository handles one domain
- ✅ **Separation of Concerns**: Clean boundaries between data access layers
- ✅ **Repository Pattern**: Proper abstraction of database operations
- ✅ **Dependency Injection**: Services now depend on repositories, not raw DB
- ✅ **Testability**: Repositories can be easily mocked and tested independently

## Migration Details
- **TransactionService** → uses `TransactionRepository`
- **ChildService** → uses `ChildRepository`  
- **ParentalControlService** → uses `ParentalControlRepository`
- **All API tests** updated to use services instead of direct DB calls
- **Backward compatibility** maintained during migration, then cleaned up

## Code Quality
- **47% reduction** in total storage layer code (627 vs 1,181 lines)
- **All 104 tests passing** ✅
- **Zero compilation errors** ✅
- **Full application functionality preserved** ✅

## Files Changed
- Deleted: `src-tauri/src/backend/storage/db.rs`
- Added: `src-tauri/src/backend/storage/connection.rs`
- Added: `src-tauri/src/backend/storage/repositories/` (4 files)
- Modified: All domain services to use repository pattern
- Modified: API tests to use proper service layer

This refactoring significantly improves maintainability, testability, and 
follows clean architecture principles while preserving all existing functionality. 